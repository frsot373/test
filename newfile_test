newfile_test


from typing import Any, Dict, List, Literal, Optional, Union
# class BaseModel:
#   pass
# class ChatCompletionResponse(BaseModel):
#     model: str
 
class ChatMessage():
    def __init__(self, role, c):
        self.role = role
        self.content = c
        role: str
        content: str


class ChatCompletionRequest():
    model: str
    messages: List[ChatMessage]
    temperature: float = None
    top_p: float = None
    max_length: int = None
    stream: bool = False


def api(request: ChatCompletionRequest):
    if request.messages[-1].role != "user":
    

    if request.stream:
        print("invalid error")
        return

    history = []

    response, history = model.chat(tokenizer,
                                   query,
                                   history=history,
                                   max_length=request.max_length if request.max_length else 2048,
                                   top_p=request.top_p if request.top_p else 0.7,
                                   temperature=request.temperature if request.temperature else 0.95,
                                   )
    print(response)


request = ChatCompletionRequest()
 
for top_p in [0.1,   0.9888]:
    for temperature in [0.1, 0.5,  1]:
        request.top_p = top_p
       

newfile_test
